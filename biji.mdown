chmod命令用于改变linux系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。

centos在yum install报错：Another app is currently holding the yum lock解决方法

*# rm -f /var/run/yum.pid*


问题：

ssh: connect to host 192.168.***.** port 22: Connection refused

这是由于对方server的ssh服务没有开。这个server端开启服务即可。 

登陆root帐户，输入 cat  /etc/redhat-release，即可显示系统版本。

输入 uname  -r ，可以查询内核版本。

 如果没有lftp命令，需要先安装：

    yum install lftp


SSH 默认连接到目标主机的 22 端口上,但是由于各种原因你可能需要连接到其他端口.

file:/D:/Mailtech/cmdev/branches/XT5.0.x/template.NG/web.modules/coremail.XT5/src/XT5/test/    $ ssh -p 10022 user@hostname

如上命令就是通过添加参数 -p 指定端口号为 10022.


###2016.07.06

window.frameElement

返回嵌入当前window对象的元素(比如 <iframe> 或者 <object>),如果当前window对象已经是顶层窗口,则返回null.


    new Dialog({
        trigger: '#example5',
        height: '400px'
    }).before('show',function() {
        this.set('content', this.activeTrigger.attr('data-src'));
    });




deferred对象就是jQuery的回调函数解决方案。

dtd.resolve()的意思是，将dtd对象的执行状态从"未完成"改为"已完成"，从而触发done()方法。

还存在一个deferred.reject()方法，作用是将dtd对象的执行状态从"未完成"改为"已失败"，从而触发fail()方法。

jQuery提供了deferred.promise()方法。它的作用是，在原来的deferred对象上返回另一个deferred对象，后者只开放与改变执行状态无关的方法（比如done()方法和fail()方法），屏蔽与改变执行状态有关的方法（比如resolve()方法和reject()方法），从而使得执行状态不能被改变。


1） $.Deferred() 生成一个deferred对象。

　　（2） deferred.done() 指定操作成功时的回调函数

　　（3） deferred.fail() 指定操作失败时的回调函数

　　（4） deferred.promise() 没有参数时，返回一个新的deferred对象，该对象的运行状态无法被改变；接受参数时，作用为在参数对象上部署deferred接口。

　　（5） deferred.resolve() 手动改变deferred对象的运行状态为"已完成"，从而立即触发done()方法。

　　（6）deferred.reject() 这个方法与deferred.resolve()正好相反，调用后将deferred对象的运行状态变为"已失败"，从而立即触发fail()方法。

　　（7） $.when() 为多个操作指定回调函数。

除了这些方法以外，deferred对象还有二个重要方法，上面的教程中没有涉及到。

　　（8）deferred.then()

有时为了省事，可以把done()和fail()合在一起写，这就是then()方法。



**打开项目下的.idea文件夹，找到其中的vcs.xml打开，将<mapping directory="" vcs="" />中的vcs的值清空即可**



当一个程序开始启动后，stdin, stdout, and stderr are 0, 1,and 2，其它的文件描述符则排在其后。

 Linux的本质就是一切皆文件，输入输出设备也是以文件形式存在和管理的。

内核启动的时候默认打开这三个I/O设备文件：标准输入文件stdin，标准输出文件stdout，标准错误输出文件stderr，分别得到文件描述符 0, 1, 2。

jQuery.inArray()函数用于在数组中搜索指定的值，并返回其索引值。如果数组中不存在该值，则返回 -1。




2016.07.15


断点调试，查看位置出发函数，   
core  文件proto 函数

熟悉整体布局，函数位置，调用



.sendMessage
.offMessage
.subscribe
.publish
.unsubscrib



jQuery的deferred对象详解

deferred对象就是jQuery的回调函数解决方案defer的意思是"延迟"
为多个操作指定回调函数

deferred对象的另一大好处，就是它允许你为多个事件指定一个回调函数，这是传统写法做不到的。

请看下面的代码，它用到了一个新的方法$.when()：

    　　$.when($.ajax("test1.html"), $.ajax("test2.html"))

    　　.done(function(){ alert("哈哈，成功了！"); })

    　　.fail(function(){ alert("出错啦！"); });

    （运行代码示例4）

这段代码的意思是，先执行两个操作$.ajax("test1.html")和$.ajax("test2.html")，如果都成功了，就运行done()指定的回调函数；如果有一个失败或都失败了，就执行fail()指定的回调函数。

jQuery规定，deferred对象有三种执行状态----未完成，已完成和已失败。如果执行状态是"已完成"（resolved）,deferred对象立刻调用done()方法指定的回调函数；如果执行状态是"已失败"，调用fail()方法指定的回调函数；如果执行状态是"未完成"，则继续等待，或者调用progress()方法指定的回调函数（jQuery1.7版本添加）。

还存在一个deferred.reject()方法，作用是将dtd对象的执行状态从"未完成"改为"已失败"，从而触发fail()方法。

有时为了省事，可以把done()和fail()合在一起写，这就是then()方法。

    　　$.when($.ajax( "/main.php" ))

    　　.then(successFunc, failureFunc );


react sixiang 
if (sessionStorage.clickcount) {
    sessionStorage.clickcount = Number(sessionStorage.clickcount)+1;
} else {
    sessionStorage.clickcount = 1;
}
document.getElementById("result").innerHTML = "you have clicked the button " + sessionStorage.clickcount + "times in this session.";





some thing not right , try every detatial

>Node

Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances. --- https://developer.mozilla.org...





F8: 继续执行
F10: step over, 单步执行, 不进入函数
F11: step into, 单步执行, 进入函数
shift + F11: step out, 跳出函数
ctrl + o: 打开文件
ctrl + shit + o: 跳到函数定义位置
ctrl + shift + f: 所有脚本中搜索


一个 Promise 一般有3种状态：

pending: 初始状态，不是fulfilled，也不是rejected.
fulfilled: 操作成功完成.
rejected: 操作失败.

CSS雪碧图合并 - 减少请求
合并压缩CSS跟JavaScript代码 - 减少请求
CSS代码放在header头部里面，JavaScript代码放到body结束之前 - 因为JavaScript代码执行会阻塞
然后我们可以自豪地晒出下面的代码片段：

<!DOCTYPE HTML>
<html>
    <head>
        <link rel="stylesheet" href="xxx.cdn.com/??a.css,b.css" />
    </head>
    <body>
        ...
        <script src="xxx.cdn.com/??a.js,b.js"></script>
    </body>
</html>


在每个 HTTP 2.0 的 流 里面有个 优先值 ，这个 优先值 确定着客户端跟服务器处理不同的 流 采取不同的 优先级策略 ，高优先级的应该优先发送，但这不会绝对的（绝对等待会导致 首队阻塞 问题）。在分配处理资源和客户端与服务器间的宽带，不同优先级的混合都是必须的。

HTTP 2.0 新增加 服务器提示 ，可以先于客户端检测到将要请求的资源，提前通知客户端，服务器不发送所有资源的实体，只发送资源的 URL。客户端接到提示后会进行验证缓存，如果发现需要这些资源，则正式发起请求。

HTTP协议从0.9版本开始不断增加新的功能特性，但长远来看都是 向前兼容 的，HTTP 2.0 在 应用层 跟 传输层 之间增加了一个 二进制分帧层，从而能够达到 “在不改动HTTP的语义、HTTP方法、状态码、URI及首部字段的情况下，突破HTTP 1.1的性能限制，改进传输性能，实现低延迟和高吞吐量。”

在 二进制分帧层 上， HTTP 2.0 会将所有传输的信息分割为更小的消息和帧，并对它们采用二进制格式的编码，其中 HTTP 1.1 的首部信息会被封装到 Headers 帧，而 request body 被封装到 Data 帧里面。






[root@Shaoxing ~]# cd /media/VMware\ Tools/          进入光驱（注意Tools前边有空格）



挂载成功以后 在VMwareTools里边有一个 VMwareTools-9.2.3-1031360.tar.gz  （你的也许不一样）拿去解压

[root@Shaoxing VMware Tools]# tar zxvf VMwareTools-9.2.3-1031360.tar.gz -C /tmp/         解压缩tar包到/tmp 下

[root@Shaoxing VMware Tools]# cd /tmp/vmware-tools-distrib/       进入/tmp

 

三、安装VMware Tools

[root@localhost vmware-tools-distrib]# ./vmware-install.pl
 
下面的选项就按照默认值。一路回车就可以：

In which directory do you want to install the binary files?
[/usr/bin]

What is the directory that contains the init directories (rc0.d/ to rc6.d/)?

[/etc/rc.d]

What is the directory that contains the init scripts?
[/etc/rc.d/init.d]

In which directory do you want to install the daemon files?
[/usr/sbin]

In which directory do you want to install the library files?
[/usr/lib/vmware-tools]

The path “/usr/lib/vmware-tools” does not exist currently. This program is goingto create it, including needed parent directories. Is this what you want?
[yes] .........很多很多东西 回车默认就可以了

Enjoy,

–the VMware team （到此安装完毕了，别玩了下边的一些操作）


四、完成安装

记得启用权限 （如果启动了以后还是不能自如的复制粘贴那么请关闭CentOS电源重新打开）